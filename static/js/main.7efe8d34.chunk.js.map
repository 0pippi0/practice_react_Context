{"version":3,"sources":["contexts/sample.js","components/Sends.js","components/LeftPane.js","components/Receives.js","components/RightPane.js","lib/createUseConsumer.js","contexts/another.js","components/Counter.js","App.js","registerServiceWorker.js","index.js"],"names":["Context","createContext","Provider","SampleConsumer","Consumer","SampleProvider","state","value","actions","setValue","setState","this","props","children","Component","useSample","WrappedComponent","input","handleChange","e","target","handleSubmit","preventDefault","onSubmit","onChange","type","LeftPane","className","RightPane","createUseConsumer","mapContextToProps","defaultMapContextToProps","context","UseConsumer","contextProps","displayName","name","AnotherConsumer","AnotherProvider","number","increment","useAnother","onClick","AppProvider","contexts","reduce","prev","React","createElement","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7efe8d34.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\r\n\r\n\r\nconst Context = createContext(); // Context 를 만듭니다.\r\n\r\n// Context 안에는 Provider 와 Consumer 라는게 존재합니다.\r\n// 이 둘은, Context 를 이용하기 위해 필요한 컴포넌트들입니다.\r\n// Consumer 는 나중에 내보내줄 때 편하도록 SampleConsumer 라고 부르도록 설정했습니다.\r\nconst { Provider, Consumer: SampleConsumer } = Context;\r\n\r\n// Provider 에서 state 를 사용하기 위해서 컴포넌트를 새로 만들어줍니다.\r\nclass SampleProvider extends Component {\r\n    state = {\r\n        value: '기본값입니다'\r\n    }\r\n\r\n    // 여기서 actions 라는 객체는 우리가 임의로 설정하는 객체입니다.\r\n    // 나중에 변화를 일으키는 함수들을 전달해줄때, 함수 하나하나 일일히 전달하는 것이 아니라,\r\n    // 객체 하나로 한꺼번에 전달하기 위함입니다.\r\n    actions = {\r\n        setValue: (value) => {\r\n            this.setState({value});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { state, actions } = this;\r\n\r\n        // Provider 내에서 사용할 값은, \"value\" 라고 부릅니다.\r\n        // 현재 컴포넌트의 state 와 actions 객체를 넣은 객체를 만들어서,\r\n        // Provider 의 value 값으로 사용하겠습니다.\r\n        const value = { state, actions };\r\n\r\n        return(\r\n            <Provider value={value}>\r\n                {this.props.children}\r\n            </Provider>\r\n        )\r\n    }\r\n}\r\n\r\n// :: HoC 를 사용\r\nfunction useSample(WrappedComponent) {\r\n    return function useSample(props) {\r\n        return(\r\n            <SampleConsumer>\r\n                {\r\n                    ({ state, actions }) => (\r\n                        <WrappedComponent\r\n                            value={state.value}\r\n                            setValue={actions.setValue}\r\n                        />\r\n                    )\r\n                }\r\n            </SampleConsumer>\r\n        )\r\n    }\r\n}\r\n\r\n// 내보내줍니다.\r\nexport { SampleProvider, SampleConsumer, useSample };","import React, { Component } from 'react';\r\nimport { useSample } from '../contexts/sample';\r\n\r\nclass Sends extends Component {\r\n\r\n    state = {\r\n        input: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        // :: 초기 값 설정\r\n        this.setState({\r\n            input: this.props.value,\r\n        })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ input: e.target.value });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // :: props로 받은 setValue 호출\r\n        this.props.setValue(this.state.input);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input value={this.state.input} onChange={this.handleChange}/>\r\n                <button type=\"submit\">설정</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n// useSample 사용\r\nexport default useSample(Sends);","import React from 'react';\r\nimport Sends from './Sends';\r\n\r\nconst LeftPane = () => {\r\n    return(\r\n        <div className=\"pane\">\r\n            <Sends />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LeftPane;","import React from 'react';\r\nimport { useSample } from '../contexts/sample';\r\n\r\nconst Receives = ({ value }) => {\r\n    return(\r\n        <div>\r\n            현재 설정된 값: { value }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default useSample(Receives);","import React from 'react';\r\nimport Receives from './Receives';\r\n\r\nconst RightPane = () => {\r\n    return (\r\n        <div className=\"pane\">\r\n            <Receives />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RightPane;","import React from 'react';\r\n\r\nconst createUseConsumer = (Consumer) => (mapContextToProps) => (WrappedComponent) => {\r\n    // mapContextToProps 가 없으면 그냥 context 를 그대로 props 에 전달\r\n    const defaultMapContextToProps = (context) => ({context});\r\n\r\n    function UseConsumer(props) {\r\n        return (\r\n            <Consumer>\r\n                {\r\n                    context => {\r\n                        // context에서 원하는 값 추출\r\n                        const contextProps = (mapContextToProps || defaultMapContextToProps)(context);\r\n                        return (\r\n                            <WrappedComponent\r\n                                {...contextProps}\r\n                                {...props}\r\n                            />\r\n                        );\r\n                    }\r\n                }\r\n            </Consumer>\r\n        );\r\n    }\r\n\r\n    // displayName 설정\r\n    const displayName = WrappedComponent.displayName || WrappedComponent.name || 'component';\r\n    UseConsumer.displayName = `UseConsumer(${displayName})`;\r\n    \r\n    return UseConsumer;\r\n}\r\n\r\nexport default createUseConsumer;","import React, { createContext, Component } from 'react';\r\nimport createUseConsumer from '../lib/createUseConsumer';\r\n\r\n\r\nconst Context = createContext();\r\n\r\nconst {\r\n    Provider,\r\n    Consumer: AnotherConsumer\r\n} = Context;\r\n\r\nclass AnotherProvider extends Component {\r\n    state = {\r\n        number: 1,\r\n    }\r\n\r\n    actions = {\r\n        increment: () => {\r\n            this.setState(\r\n                ({ number }) => ({ number: number + 1 })\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { state, actions } = this;\r\n        const value = { state, actions };\r\n\r\n        return(\r\n            <Provider value={value}>\r\n                {this.props.children}\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nconst useAnother = createUseConsumer(AnotherConsumer);\r\n\r\n\r\nexport {\r\n    AnotherProvider,\r\n    AnotherConsumer,\r\n    useAnother\r\n};","import React from 'react';\r\nimport { useAnother } from '../contexts/another';\r\n\r\n\r\nconst Counter = ({ number, increment }) => {\r\n    return (\r\n        <div>\r\n            <h1>{number}</h1>\r\n            <button onClick={increment}>더하기</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default useAnother(\r\n    ({ state, actions }) => ({\r\n        number: state.number,\r\n        increment: actions.increment\r\n    })\r\n)(Counter);","import React from 'react';\r\nimport LeftPane from './components/LeftPane';\r\nimport RightPane from './components/RightPane';\r\nimport { SampleProvider } from './contexts/sample';\r\nimport { AnotherProvider } from './contexts/another';\r\nimport Counter from './components/Counter';\r\n\r\nconst AppProvider = ({ contexts, children }) => contexts.reduce(\r\n    (prev, context) => React.createElement(context, {\r\n        children: prev\r\n    }),\r\n    children\r\n);\r\n\r\nconst App = () => {\r\n    return (\r\n        <AppProvider\r\n            contexts={[SampleProvider, AnotherProvider]}\r\n        >\r\n            <div className=\"panes\">\r\n                <LeftPane />\r\n                <RightPane />\r\n            </div>\r\n            <Counter />\r\n        </AppProvider>\r\n    );\r\n};\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}